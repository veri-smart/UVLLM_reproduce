Please act as an expert in Verilog debugging and code modification.

This design implements an I2C master controller consisting of three modules: `i2c_master_bit_ctrl`, `i2c_master_byte_ctrl`, and `i2c_master_top`. It supports I2C bus communication (including start/stop conditions, read/write operations) and interfaces with a Wishbone bus for register configuration and control. The controller handles low-level bit manipulation, byte-level data transfer, and system-level bus interaction, with features like noise filtering, arbitration loss detection, and interrupt generation.


2. Module Interfaces

2.1 `i2c_master_bit_ctrl` (Bit-Level Controller)
- Inputs:
  - `clk`: System clock.
  - `rst`, `nReset`: Reset signals (synchronous and asynchronous).
  - `ena`: Enable signal for the controller.
  - `clk_cnt`: Clock divider value for I2C clock generation.
  - `cmd`: 4-bit command (`I2C_CMD_NOP`, `START`, `STOP`, `WRITE`, `READ`).
  - `din`: Data input for write operations.
  - `scl_i`, `sda_i`: I2C SCL/SDA line inputs (from external pins).

- Outputs:
  - `cmd_ack`: Acknowledgment of command completion.
  - `busy`: Indicates controller is busy.
  - `al`: Arbitration loss flag.
  - `dout`: Data output from read operations.
  - `scl_o`, `sda_o`: I2C SCL/SDA line outputs (to external pins).
  - `scl_oen`, `sda_oen`: Output enable signals for SCL/SDA (active low for tri-state control).


2.2 `i2c_master_byte_ctrl` (Byte-Level Controller)
- Inputs:
  - `clk`, `rst`, `nReset`, `ena`, `clk_cnt`: Same as bit controller.
  - `start`, `stop`, `read`, `write`: Control signals for I2C operations.
  - `ack_in`: ACK signal input for read operations.
  - `din`: 8-bit data to transmit.
  - `scl_i`, `sda_i`: I2C line inputs (from pins).

- Outputs:
  - `cmd_ack`: Acknowledgment of byte operation completion.
  - `ack_out`: ACK signal received from slave.
  - `dout`: 8-bit data received from slave.
  - `i2c_busy`: Indicates I2C bus is busy.
  - `i2c_al`: Arbitration loss flag.
  - `scl_o`, `sda_o`, `scl_oen`, `sda_oen`: I2C line outputs (to pins).


2.3 `i2c_master_top` (Top-Level Module)
- Inputs:
  - `wb_clk_i`, `wb_rst_i`: Wishbone bus clock and reset.
  - `arst_i`: Asynchronous reset (configurable level via `ARST_LVL`).
  - `wb_adr_i`: 3-bit Wishbone address.
  - `wb_dat_i`: 8-bit Wishbone data input.
  - `wb_we_i`, `wb_stb_i`, `wb_cyc_i`: Wishbone control signals (write enable, strobe, cycle).
  - `scl_pad_i`, `sda_pad_i`: I2C pad inputs.

- Outputs:
  - `wb_dat_o`: 8-bit Wishbone data output.
  - `wb_ack_o`: Wishbone acknowledgment.
  - `wb_inta_o`: Interrupt request.
  - `scl_pad_o`, `sda_pad_o`: I2C pad outputs.
  - `scl_padoen_o`, `sda_padoen_o`: I2C pad output enables.


3. Implementation Details

3.1 `i2c_master_bit_ctrl`
- Bit-Level Timing & Signaling: Manages I2C physical layer operations, including generating start (`SDA` falling edge while `SCL` high) and stop (`SDA` rising edge while `SCL` high) conditions, and shifting bits during read/write.
- Clock Generation: Uses `clk_cnt` to divide the system clock, generating I2C clock (SCL) with configurable frequency.
- Noise Filtering: Implements a 3-stage filter (`fSCL`, `fSDA`) for SCL/SDA signals to suppress glitches, using a filter counter derived from `clk_cnt`.
- State Machine: 18-bit state register (`c_state`) handles command execution:
  - `idle`: Waits for commands.
  - `start_a` to `start_e`: Generate start condition.
  - `stop_a` to `stop_d`: Generate stop condition.
  - `wr_a` to `wr_d`: Shift out 1 bit (write operation).
  - `rd_a` to `rd_d`: Shift in 1 bit (read operation).


3.2 `i2c_master_byte_ctrl`
- Byte-Level Protocol: Coordinates bit-level operations to transmit/receive 8-bit bytes, including ACK/NACK handling.
- Shift Register: `sr` (shift register) holds data being transmitted/received; shifts left during write, right during read.
- Counters: `dcnt` (3-bit) tracks bits shifted (0-7) to detect byte completion (`cnt_done`).
- State Machine: 5-bit state register (`c_state`) orchestrates operations:
  - `ST_IDLE`: Waits for `start`/`read`/`write`/`stop` triggers.
  - `ST_START`/`ST_STOP`: Executes start/stop commands via bit controller.
  - `ST_WRITE`/`ST_READ`: Transmits/receives 8 bits (repeating bit operations).
  - `ST_ACK`: Handles ACK/NACK exchange after byte transfer.


3.3 `i2c_master_top`
- Wishbone Interface: Maps internal registers to 3-bit addresses for configuration:
  - `prer[15:0]`: Clock prescaler (sets I2C frequency).
  - `ctr`: Control register (enables core `[7]`, interrupts `[6]`).
  - `txr`/`rxr`: Transmit/receive data registers.
  - `cr`: Command register (triggers `start`/`stop`/`read`/`write`).
  - `sr`: Status register (flags: ACK received, bus busy, arbitration loss, interrupt).
- Interrupt Handling: Generates `wb_inta_o` when operations complete (`done`), arbitration loss (`i2c_al`), or interrupt flag (`irq_flag`) is set (controlled by `ien` in `ctr`).
- Reset Handling: Combines asynchronous reset (`arst_i`) and Wishbone reset (`wb_rst_i`) for system stability.


4. Functional Summary
- I2C Communication: Supports standard I2C master operations:
  - Initiating communication with start condition.
  - Transmitting/receiving bytes with ACK/NACK.
  - Terminating communication with stop condition.
- Configurability: I2C clock frequency is set via `prer`; interrupts are enabled via `ctr[6]`.
- Error Handling: Detects arbitration loss (`al` flag) when another master drives the bus, triggering interrupts.
- Wishbone Integration: Allows CPU/microcontroller control via standard Wishbone bus, enabling easy integration into SoCs.
